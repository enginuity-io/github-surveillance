name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  KUBERNETES_NAMESPACE: github-surveillance

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}
          
      # Added for apache-devlakes DORA metric. Not required for CICD 
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        continue-on-error: true  # Continue workflow even if this step fails
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production  # or staging, dev, etc.
          description: "Deployment from GitHub Actions"
          
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          no-cache: true

      - name: Check if frontend directory exists
        id: check_frontend
        run: |
          if [ -d "./frontend" ]; then
            echo "Frontend directory exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Frontend directory does not exist, creating minimal structure"
            echo "exists=false" >> $GITHUB_OUTPUT
            mkdir -p frontend
            cp -r ./backend/Dockerfile ./frontend/
            # Create a minimal package.json
            echo '{
              "name": "github-surveillance-frontend",
              "version": "1.0.0",
              "private": true
            }' > ./frontend/package.json
          fi
          
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create GitHub token secret
        run: |
          kubectl create secret generic github-token \
            --from-literal=token=${{ secrets.GITHUB_TOKEN }} \
            -n ${{ env.KUBERNETES_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Helm chart
        run: |
          helm upgrade --install github-surveillance ./helm/githubsurveillance \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set backend.image.repository=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set backend.env.GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            --set backend.env.GITHUB_ORG=amvirdev \
            --wait

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=github-surveillance-backend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=180s
          kubectl wait --for=condition=ready pod -l app=github-surveillance-frontend -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=180s

      # Send deployment data to Apache DevLake for DORA metrics
      - name: Send deployment data to Apache DevLake
        if: success()
        run: |
          curl https://204f-2601-147-4c00-1c0-b405-dc37-292-5351.ngrok-free.app/api/rest/plugins/webhook/connections/2/deployments -X 'POST' \
          -H 'Authorization: Bearer VH8L2h3Jkjdu1rap2TRR4PqKNSRprlqczD477aM5S9gVdbjBquW3uqpVIojK1dfNyhvftyZkExJ1z4fpFs6gmLQnYgTAFkAIYvolI0OkBxwbFfeqxHMEiGGIx12mGIlZ' \
          -d '{
            "id": "github-surveillance-deployment-${{ github.run_id }}",
            "startedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
            "finishedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
            "result": "SUCCESS",
            "deploymentCommits":[
              {
                "repoUrl": "https://github.com/${{ github.repository }}",
                "refName": "${{ github.ref_name }}",
                "startedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
                "finishedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
                "commitSha": "${{ github.sha }}",
                "commitMsg": "${{ github.event.head_commit.message }}"
              }
            ]
          }'
          
      # Send deployment failure data to Apache DevLake for DORA metrics
      - name: Send deployment failure data to Apache DevLake
        if: failure()
        run: |
          curl https://204f-2601-147-4c00-1c0-b405-dc37-292-5351.ngrok-free.app/api/rest/plugins/webhook/connections/2/deployments -X 'POST' \
          -H 'Authorization: Bearer VH8L2h3Jkjdu1rap2TRR4PqKNSRprlqczD477aM5S9gVdbjBquW3uqpVIojK1dfNyhvftyZkExJ1z4fpFs6gmLQnYgTAFkAIYvolI0OkBxwbFfeqxHMEiGGIx12mGIlZ' \
          -d '{
            "id": "github-surveillance-deployment-${{ github.run_id }}",
            "startedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
            "finishedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
            "result": "FAILURE",
            "deploymentCommits":[
              {
                "repoUrl": "https://github.com/${{ github.repository }}",
                "refName": "${{ github.ref_name }}",
                "startedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
                "finishedDate": "'$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed "s/\([0-9]\{2\}\)$/:\1/")'",
                "commitSha": "${{ github.sha }}",
                "commitMsg": "${{ github.event.head_commit.message }}"
              }
            ]
          }'
